<!DOCTYPE html>
<html>
<head>
  <title>Alert</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">                 
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
  <link rel="icon" href="data:,">
   <style type="text/css">  
   :root{
            --bg1 :#9b59b6;
            --bg2 :#3498db;
            --text :#26ade4;
        } 
        *{
            margin: 0;
            padding: 0;
            outline: none;
        }
        a{
            text-decoration: none;
        }
   .Background{
       display: grid;
       background: grey;
       grid-template-columns: 20% 80% ;
       grid-template-areas: 
         "h h"
         "hm hm"
         "o o"
         "p pt";
       grid-gap: 0.3rem;  
      
   }
   .Header{
       height: 70px;   
       grid-area: h;
       background: #343a40;
   }
   .Header-1{
       color: white; 
       text-align: left;  
       font-size: 1.5rem; 
   }
   .Header-2{
       color: white; 
       background-color: gray;
       text-align: left;  
       font-size: 1.2rem; 
   }
   .Header-3{
       color: white; 
       text-align: left;  
       font-size: 1.1rem; 
   }
   .Home{
       height: 20px;
       background: #343a40;
       grid-area: hm;
       display: grid;
       grid-template-columns: 4% 96%;
       grid-template-areas: 
         "bh ba"
         "bh ba";
       grid-gap: 0.3rem;  
   }
   .Button-Home{
        border-radius: 12px;
        color: rgb(51, 44, 44);
        padding: 4px 16px;
        transition-duration: 0.4s;
        display: inline-block;
        cursor: pointer;
        grid-area: bh;
  }
  .button-color{
    background-color: #008CBA;
  }
   .Button-Alert{
       grid-area: ba;
   }

   .Graph{
       height: 300px;
       background: white;
       grid-area: o;
   }

   .Performance-Indicator{
       height: 250px;
       background: #343a40;
       grid-area: p;
   }

   .Alarms{
       height: 250px;
       background: #343a40;
       grid-area: pt;
   }
   .Header-4{
        color: rgb(0, 110, 255); 
       text-align: left;  
       font-size: 1.1rem; 
  }

  </style>
</head>
<body>
    <div class="Background">
       <div class="Header">
        <img src="https://www.studytienganh.vn/upload/2021/07/109469.jpg" width="170px" height="65px">
        <h class="Header-1">  SCADA for WindPower HBRE group 9 </h>
            
       </div>
       <div class="Home">
           <div > <a href="/windpower"><button class="Button-Home button-color">Home</button></a></div>
       </div>

       <div class="Graph">
        <canvas id="Tb1Chart" width= 300vw height=100%></canvas>
       </div>
    </div>
    <script src="jquery.js"></script>
    <script src="socket.io/socket.io.js"> </script>
    <script src="xuly.js"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>
</body>
<script>
    let dataPower = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
       let dataWind = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
       var cxt = document.getElementById("Tb1Chart").getContext("2d");
       var Tb1Chart = new Chart(cxt, {
           type: "line",
           data: {
               labels: [0,10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190],
               datasets: [
                   {
                       data: dataPower,
                       label: "power",
                       yAxisID: "power",
                       borderColor: "#3e95cd",
                       fill: false,
                   },
                   {
                       data: dataWind,
                       label: "wind",
                       yAxisID: "wind",
                       borderColor: "#8e5ea2",
                       fill: false,
                   },
               ],
           },
           options: {
               title: {
                   display: true,
                   fontSize: 15,
               },
               scales: {
                   yAxes: [
                       {
                           id: "wind",
                           position: "right",
                           scaleLabel: {
                               display: true,
                               labelString: "Wind Speed(m/s)",
                               fontSize: 15,                              
                           },
                           ticks: {
                                   beginAtZero: true,
                                   steps: 1,
                                   max: 7,
                           },
                       },
                       {
                           id: "power",
                           position: "left",
                           scaleLabel: {
                               display: true,
                               labelString: "POWER(KW)",
                               fontSize: 15,
                               beginAtZero: true,
                           },
                           ticks: {
                                   beginAtZero: true,
                                   steps: 1000,
                                   max: 7000,
                           },
                       },
                   ],
                   xAxes: [
                       {
                           scaleLabel: {
                               display: true,
                               labelString: "s",
                               fontSize: 15,
                           },
                       },
                   ],
               },
           },
       });
       socket.on("server-update-data1", function (data1) {
           dataPower1[0]   = data1.windPower1;
           dataWind1[0]    = data1.windSpeed1;  
       });
       let flagPower = setInterval(() => {
           let newData1 = dataPower1[0];
               oldData1 = dataPower1.slice(1); // dịch dữ liệu 
           oldData1.push(newData1);
           dataPower1 = [].concat(oldData1);
           Tb1Chart.data.datasets[0].data = dataPower1;
           Tb1Chart.update(0);
           // disable animation
       }, 2000);
       let flagWind = setInterval(() => {
           let newData1 = dataWind1[0];
               oldData1 = dataWind1.slice(1);
           oldData1.push(newData1);
           dataWind1 = [].concat(oldData1);
           Tb1Chart.data.datasets[1].data = dataWind1;
           Tb1Chart.update(0);
           // disable animation
       }, 2000);
    </script>
</html>